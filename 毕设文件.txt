
基于Sentinel-2影像的滑坡区RESI指数时序分析模型设计

// 定义中心点坐标 （101.7730802°东36.6799437°北）
var point = ee.Geometry.Point([101.7730802，36.6799437]);//xuan'dian
// 创建2500
var rectangle = point.buffer(2500).bounds();  
//guan'cha'zhi'liang'hou观察质量后 TASKS xia'zai  下载 
// 可视化矩形
Map.centerObject(rectangle, 10);
Map.addLayer(rectangle, {color: 'red'}, '10km Rectangle');

// 设置时间范围
var startDate = '2023-6-20';//xx'g's'j
var endDate = '2023-6-25';

// 获取 Sentinel-2 影像数据
var collection = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
  .filterBounds(rectangle)  // 筛选范围
  .filterDate(startDate, endDate);  // 选择时间范围

// 获取集合的中值影像
var image = collection.median();  // 使用影像集合中的中值影像

// 打印影像集合的数量，确保数据存在
print('Number of images in the collection:', collection.size());

// 裁剪影像到矩形区域
image = image.clip(rectangle);

// 可视化影像
Map.addLayer(image, {
  min: 0, max: 3000,  // 可视化范围（根据影像的反射值调整）
  bands: ['B4', 'B3', 'B2']  // 使用红色、绿色、蓝色波段
}, 'Sentinel-2 RGB');

// 构造导出文件名，加入日期信息
var fileName = 'Sentinel2_Image_' + startDate + '_to_' + endDate;

// 导出影像
Export.image.toDrive({
  image: image,
  description: fileName, 
  scale: 10,
  region: rectangle,  // 确保导出区域为矩形
  fileFormat: 'GeoTIFF',
  crs:'EPSG:4326',
  maxPixels: 1e8
});





FVC
 // 定义中心点坐标 (36°51'36"N, 101°55'49"E)
var point = ee.Geometry.Point([101.93028, 36.86000]);

// 创建10km × 10km的矩形（5km 半径）
var rectangle = point.buffer(5000).bounds();  // 5000米为半径，使用bounds()得到矩形

// 可视化矩形
Map.centerObject(rectangle, 10);
Map.addLayer(rectangle, {color: 'red'}, '10km Rectangle');

// 设置时间范围
var startDate = '2023-5-20';
var endDate = '2023-5-25';

// 获取 Sentinel-2 影像数据
var collection = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
  .filterBounds(rectangle)  // 筛选范围
  .filterDate(startDate, endDate);  // 选择时间范围

// 计算 NDVI
var ndvi = collection.map(function(image) {
  var ndvi_image = image.normalizedDifference(['B8', 'B4']).rename('NDVI');  // B8: 近红外, B4: 红色
  return image.addBands(ndvi_image);
});

// 计算 NDVI 中值影像
var medianNdvi = ndvi.select('NDVI').median();

// 设定 NDVI 的最小值和最大值，基于区域数据
var ndviMin = 0.2;  // 假设最低值（无植被区域）
var ndviMax = 0.9;   // 假设最大值（完全植被区域）

// 计算 FVC
var fvc = medianNdvi.subtract(ndviMin).divide(ndviMax - ndviMin).clamp(0, 1);

// 裁剪 FVC 到矩形区域（ROI）
var fvcCropped = fvc.clip(rectangle);

// 显示裁剪后的 FVC
Map.addLayer(fvcCropped, {
  min: 0, max: 1,
  palette: ['red', 'green']
}, 'FVC');

// 导出裁剪后的 FVC 图像
Export.image.toDrive({
  image: fvcCropped,
  description: 'FVC' + startDate + '_to_' + endDate,
  scale: 10,
  region: rectangle,  // 导出区域
  fileFormat: 'GeoTIFF',
  maxPixels: 1e8
});



// 定义中心点坐标 (36°51'36"N, 101°55'49"E)
var point = ee.Geometry.Point([101.9303, 36.8600]); // 101°47'05" E, 36°41'45" N

// 创建10km × 10km的矩形（5km 半径）
var rectangle = point.buffer(5000).bounds();  // 5000米为半径，使用bounds()得到矩形
// 定义研究区域
var roi = rectangle;

// 可视化矩形
Map.centerObject(rectangle, 10);
Map.addLayer(rectangle, {color: 'red'}, '10km Rectangle');

var palette = ["d73027","f46d43","fdae61","fee08b","d9ef8b","a6d96a","66bd63","1a9850"];

// 时间范围（2021年的每个月）
var timeRanges = [
 ['2021-01-01', '2021-01-15'],
  ['2021-02-01', '2021-02-15'],
  ['2021-03-01', '2021-03-15'],
  ['2021-04-01', '2021-04-15'],
  ['2021-05-01', '2021-05-15'],
  ['2021-06-01', '2021-06-15'],
  ['2021-07-01', '2021-07-15'],
  ['2021-08-01', '2021-08-15'],
  ['2021-09-01', '2021-09-15'],
  ['2021-10-01', '2021-10-15'],
  ['2021-11-01', '2021-11-15'],
  ['2021-12-01', '2021-12-15'],
  
  ['2022-01-01', '2022-01-15'],
  ['2022-02-01', '2022-02-15'],
  ['2022-03-01', '2022-03-15'],
  ['2022-04-01', '2022-04-15'],
  ['2022-05-01', '2022-05-15'],
  ['2022-06-01', '2022-06-15'],
  ['2022-07-01', '2022-07-15'],
  ['2022-08-01', '2022-08-15'],
  ['2022-09-01', '2022-09-15'],
  ['2022-10-01', '2022-10-15'],
  ['2022-11-01', '2022-11-15'],
  ['2022-12-01', '2022-12-15'],
  
  ['2023-01-01', '2023-01-15'],
  ['2023-02-01', '2023-02-15'],
  ['2023-03-01', '2023-03-15'],
  ['2023-04-01', '2023-04-15'],
  ['2023-05-01', '2023-05-15'],
  ['2023-06-01', '2023-06-15'],
  ['2023-07-01', '2023-07-15'],
  ['2023-08-01', '2023-08-15'],
  ['2023-09-01', '2023-09-15'],
  ['2023-10-01', '2023-10-15'],
  ['2023-11-01', '2023-11-15'],
  ['2023-12-01', '2023-12-15'],
  
  ['2024-01-01', '2024-01-15'],
  ['2024-02-01', '2024-02-15'],
  ['2024-03-01', '2024-03-15'],
  ['2024-04-01', '2024-04-15'],
  ['2024-05-01', '2024-05-15'],
  ['2024-06-01', '2024-06-15'],
  ['2024-07-01', '2024-07-15'],
  ['2024-08-01', '2024-08-15'],
  ['2024-09-01', '2024-09-15'],
  ['2024-10-01', '2024-10-15']
]
;

// 去云函数
function maskL8sr(image) {
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);

  var new_bands = ['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2'];
  var opticalBands = image.select(['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7'])
                          .multiply(0.0000275).add(-0.2).rename(new_bands);
  var thermalBands = image.select('ST_B10').multiply(0.00341802).add(149.0).rename(['TIR']);

  return image.addBands(opticalBands, null, true)
              .addBands(thermalBands, null, true)
              .updateMask(qaMask)
              .updateMask(saturationMask);
}

// 归一化函数
function norm_img(image) {
  var minmax = image.reduceRegion({
    reducer: ee.Reducer.minMax(),
    geometry: roi,
    scale: 30,
    maxPixels: 1e9
  }).values();
  return image.unitScale(minmax.get(1), minmax.get(0));
}

// 计算 RSEI 指标
function computeRSEI(start, end) {
  var l8 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
    .filterBounds(roi)
    .filterDate(start, end)
    .map(maskL8sr)
    .median()
    .clip(roi);

  var waterMask = l8.normalizedDifference(['Green', 'SWIR1']).lt(0.2);

  var ndvi = norm_img(l8.normalizedDifference(['NIR', 'Red']).rename('ndvi'));

  var wet = norm_img(l8.expression('B*0.1511 + G*0.1973 + R*0.3283 + NIR*0.3407 + SWIR1*(-0.7117) + SWIR2*(-0.4559)', {
    'B': l8.select('Blue'), 
    'G': l8.select('Green'),
    'R': l8.select('Red'),
    'NIR': l8.select('NIR'),
    'SWIR1': l8.select('SWIR1'),
    'SWIR2': l8.select('SWIR2')
  }).rename('wet'));

  var ibi = l8.expression('(2 * SWIR1 / (SWIR1 + NIR) - (NIR / (NIR + R) + G / (G + SWIR1))) / (2 * SWIR1 / (SWIR1 + NIR) + (NIR / (NIR + R) + G / (G + SWIR1)))', {  
      'SWIR1': l8.select('SWIR1'),
      'NIR': l8.select('NIR'),
      'R': l8.select('Red'),
      'G': l8.select('Green')
  }).rename('ibi');

  var si = l8.expression('((SWIR1 + R) - (NIR + B)) / ((SWIR1 + R) + (NIR + B))', {
      'SWIR1': l8.select('SWIR1'),
      'NIR': l8.select('NIR'),
      'R': l8.select('Red'),
      'B': l8.select('Blue')
  }).rename('si');

  var ndbsi = norm_img(ibi.add(si).divide(2).rename('ndbsi'));

  var lst = norm_img(l8.select('TIR').rename('lst'));

  return ee.Image([ndvi, wet, ndbsi, lst])
    .updateMask(waterMask)
    .set('start', start)
    .set('end', end);
}

// 按月份计算 RSEI 并导出
timeRanges.forEach(function(range) {
  var start = ee.Date(range[0]);
  var end = ee.Date(range[1]);
  var rsei = computeRSEI(start, end);
  var month = start.format('YYYY-MM').getInfo();

  // 导出每月 RSEI
  Export.image.toDrive({
    image: rsei,
    description: 'HZSEI_' + month,
    scale: 30,
    region: roi,
    fileFormat: 'GeoTIFF',
    crs:'EPSG:4326',
    maxPixels: 1e13
  });
});




修改后计算
// 定义中心点坐标 (36°51'36"N, 101°55'49"E)
var point = ee.Geometry.Point([101.9303, 36.8600]); // 101°47'05" E, 36°41'45" N

// 创建10km × 10km的矩形（5km 半径）
var rectangle = point.buffer(5000).bounds();  // 5000米为半径，使用bounds()得到矩形
// 定义研究区域
var roi = rectangle;

// 可视化矩形
Map.centerObject(rectangle, 10);
Map.addLayer(rectangle, {color: 'red'}, '10km Rectangle');

var palette = ["d73027","f46d43","fdae61","fee08b","d9ef8b","a6d96a","66bd63","1a9850"];

// 时间范围（2021年至2024年的6月份）
var timeRanges = [
  ['2021-06-01', '2021-06-30'],
  ['2022-06-01', '2022-06-30'],
  ['2023-06-01', '2023-06-30'],
  ['2024-06-01', '2024-06-30']
];

// 去云函数
function maskL8sr(image) {
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);

  var new_bands = ['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2'];
  var opticalBands = image.select(['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7'])
                          .multiply(0.0000275).add(-0.2).rename(new_bands);
  var thermalBands = image.select('ST_B10').multiply(0.00341802).add(149.0).rename(['TIR']);

  return image.addBands(opticalBands, null, true)
              .addBands(thermalBands, null, true)
              .updateMask(qaMask)
              .updateMask(saturationMask);
}

// 归一化函数
function norm_img(image) {
  var minmax = image.reduceRegion({
    reducer: ee.Reducer.minMax(),
    geometry: roi,
    scale: 30,
    maxPixels: 1e9
  }).values();
  return image.unitScale(minmax.get(1), minmax.get(0));
}

// 计算 RSEI 指标
function computeRSEI(start, end) {
  var l8 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
    .filterBounds(roi)
    .filterDate(start, end)
    .map(maskL8sr)
    .median()
    .clip(roi);

  var waterMask = l8.normalizedDifference(['Green', 'SWIR1']).lt(0.2);

  var ndvi = norm_img(l8.normalizedDifference(['NIR', 'Red']).rename('ndvi'));

  var wet = norm_img(l8.expression('B*0.1511 + G*0.1973 + R*0.3283 + NIR*0.3407 + SWIR1*(-0.7117) + SWIR2*(-0.4559)', {
    'B': l8.select('Blue'), 
    'G': l8.select('Green'),
    'R': l8.select('Red'),
    'NIR': l8.select('NIR'),
    'SWIR1': l8.select('SWIR1'),
    'SWIR2': l8.select('SWIR2')
  }).rename('wet'));

  var ibi = l8.expression('(2 * SWIR1 / (SWIR1 + NIR) - (NIR / (NIR + R) + G / (G + SWIR1))) / (2 * SWIR1 / (SWIR1 + NIR) + (NIR / (NIR + R) + G / (G + SWIR1)))', {  
      'SWIR1': l8.select('SWIR1'),
      'NIR': l8.select('NIR'),
      'R': l8.select('Red'),
      'G': l8.select('Green')
  }).rename('ibi');

  var si = l8.expression('((SWIR1 + R) - (NIR + B)) / ((SWIR1 + R) + (NIR + B))', {
      'SWIR1': l8.select('SWIR1'),
      'NIR': l8.select('NIR'),
      'R': l8.select('Red'),
      'B': l8.select('Blue')
  }).rename('si');

  var ndbsi = norm_img(ibi.add(si).divide(2).rename('ndbsi'));

  var lst = norm_img(l8.select('TIR').rename('lst'));

  return ee.Image([ndvi, wet, ndbsi, lst])
    .updateMask(waterMask)
    .set('start', start)
    .set('end', end);
}

// 按年计算6月份的RSEI并导出
timeRanges.forEach(function(range) {
  var start = ee.Date(range[0]);
  var end = ee.Date(range[1]);
  var rsei = computeRSEI(start, end);
  var year = start.format('YYYY').getInfo();

  // 导出每年6月份的RSEI
  Export.image.toDrive({
    image: rsei,
    description: 'RSEI_June_' + year,
    scale: 30,
    region: roi,
    fileFormat: 'GeoTIFF',
    crs:'EPSG:4326',
    maxPixels: 1e13
  });
});
